#the agent's name and the client configuration are set in agent.xml
operation.agentdefinition=agent.xml
operation.hasdebugui=true
operation.envlistener=client
operation.envactor=client

#these comma-separated conditions are fun.
operation.conditions=tutorial_trigger,social,participation,agree,explain,revoice,say_more
operation.room=test_cscl

#these are the active preprocessors - they annotate messages 
#and provide new events for the 'listeners'==actors to react to.
#Give the full classpath for any preprocessors or listeners. The list is comma-separated. 
#"\" at the end of the line lets you wrap the list over multiple lines.
#Note that some components are both preprocessors and listeners -- list them once in each section.
#
#PresenceWatcher notices when students enter or leave, and fires a "LaunchEvent" once enough are present.
#MessageAnnotator adds annotations based on regular expressions or keywords to MessageEvents (used by several actors)
#
#TutorialTriggerWatcher notices opportunities to launch interactive dialogues.
#TutorTurnWatcher preprocesses student and tutor events for the TutorActor. 
#
operation.preprocessors=basilica2.agents.listeners.PresenceWatcher,\
						basilica2.agents.listeners.MessageAnnotator,\
						basilica2.social.listeners.ActivityTracker,\
						basilica2.tutor.listeners.TutorialTriggerWatcher,\
						basilica2.tutor.listeners.TutorTurnWatcher,\
						basilica2.myagent.listeners.Register
												

#these are the active 'listeners'==actors. They propose actions that the agent might execute.
#
#Note that some components are both preprocessors and listeners -- list them once in each section.	
#SocialController enacts moves that promote social cohesion.
#PlanExecutor launches a static script in response to a LaunchEvent.
#				
operation.listeners=	basilica2.agents.listeners.plan.PlanExecutor,\
						basilica2.myagent.listeners.PromptActor,\
						basilica2.tutor.listeners.TutorActor
						
